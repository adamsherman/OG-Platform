/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.integration.component;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.bbg.referencedata.ReferenceDataProvider;
import com.opengamma.component.factory.tool.ToolContextComponentFactory;
import com.opengamma.financial.depgraph.provider.DependencyGraphTraceProvider;
import com.opengamma.integration.tool.IntegrationToolContext;

/**
 * Component factory for setting up a tool context.
 */
@BeanDefinition
public class IntegrationToolContextComponentFactory extends ToolContextComponentFactory {

  /**
   * The Bloomberg reference data provider.
   */
  @PropertyDefinition
  private ReferenceDataProvider _bloombergReferenceDataProvider;

  @PropertyDefinition
  private DependencyGraphTraceProvider _dependencyGraphTraceProvider;

  //-------------------------------------------------------------------------
  /**
   * Creates an empty instance of the tool context.
   * 
   * @return the empty tool context, not null
   */
  protected IntegrationToolContext createToolContext() {
    return new IntegrationToolContext();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IntegrationToolContextComponentFactory}.
   * @return the meta-bean, not null
   */
  public static IntegrationToolContextComponentFactory.Meta meta() {
    return IntegrationToolContextComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IntegrationToolContextComponentFactory.Meta.INSTANCE);
  }

  @Override
  public IntegrationToolContextComponentFactory.Meta metaBean() {
    return IntegrationToolContextComponentFactory.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -245204181:  // bloombergReferenceDataProvider
        return getBloombergReferenceDataProvider();
      case 67712595:  // dependencyGraphTraceProvider
        return getDependencyGraphTraceProvider();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -245204181:  // bloombergReferenceDataProvider
        setBloombergReferenceDataProvider((ReferenceDataProvider) newValue);
        return;
      case 67712595:  // dependencyGraphTraceProvider
        setDependencyGraphTraceProvider((DependencyGraphTraceProvider) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IntegrationToolContextComponentFactory other = (IntegrationToolContextComponentFactory) obj;
      return JodaBeanUtils.equal(getBloombergReferenceDataProvider(), other.getBloombergReferenceDataProvider()) &&
          JodaBeanUtils.equal(getDependencyGraphTraceProvider(), other.getDependencyGraphTraceProvider()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getBloombergReferenceDataProvider());
    hash += hash * 31 + JodaBeanUtils.hashCode(getDependencyGraphTraceProvider());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the Bloomberg reference data provider.
   * @return the value of the property
   */
  public ReferenceDataProvider getBloombergReferenceDataProvider() {
    return _bloombergReferenceDataProvider;
  }

  /**
   * Sets the Bloomberg reference data provider.
   * @param bloombergReferenceDataProvider  the new value of the property
   */
  public void setBloombergReferenceDataProvider(ReferenceDataProvider bloombergReferenceDataProvider) {
    this._bloombergReferenceDataProvider = bloombergReferenceDataProvider;
  }

  /**
   * Gets the the {@code bloombergReferenceDataProvider} property.
   * @return the property, not null
   */
  public final Property<ReferenceDataProvider> bloombergReferenceDataProvider() {
    return metaBean().bloombergReferenceDataProvider().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the dependencyGraphTraceProvider.
   * @return the value of the property
   */
  public DependencyGraphTraceProvider getDependencyGraphTraceProvider() {
    return _dependencyGraphTraceProvider;
  }

  /**
   * Sets the dependencyGraphTraceProvider.
   * @param dependencyGraphTraceProvider  the new value of the property
   */
  public void setDependencyGraphTraceProvider(DependencyGraphTraceProvider dependencyGraphTraceProvider) {
    this._dependencyGraphTraceProvider = dependencyGraphTraceProvider;
  }

  /**
   * Gets the the {@code dependencyGraphTraceProvider} property.
   * @return the property, not null
   */
  public final Property<DependencyGraphTraceProvider> dependencyGraphTraceProvider() {
    return metaBean().dependencyGraphTraceProvider().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IntegrationToolContextComponentFactory}.
   */
  public static class Meta extends ToolContextComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code bloombergReferenceDataProvider} property.
     */
    private final MetaProperty<ReferenceDataProvider> _bloombergReferenceDataProvider = DirectMetaProperty.ofReadWrite(
        this, "bloombergReferenceDataProvider", IntegrationToolContextComponentFactory.class, ReferenceDataProvider.class);
    /**
     * The meta-property for the {@code dependencyGraphTraceProvider} property.
     */
    private final MetaProperty<DependencyGraphTraceProvider> _dependencyGraphTraceProvider = DirectMetaProperty.ofReadWrite(
        this, "dependencyGraphTraceProvider", IntegrationToolContextComponentFactory.class, DependencyGraphTraceProvider.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "bloombergReferenceDataProvider",
        "dependencyGraphTraceProvider");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -245204181:  // bloombergReferenceDataProvider
          return _bloombergReferenceDataProvider;
        case 67712595:  // dependencyGraphTraceProvider
          return _dependencyGraphTraceProvider;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends IntegrationToolContextComponentFactory> builder() {
      return new DirectBeanBuilder<IntegrationToolContextComponentFactory>(new IntegrationToolContextComponentFactory());
    }

    @Override
    public Class<? extends IntegrationToolContextComponentFactory> beanType() {
      return IntegrationToolContextComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code bloombergReferenceDataProvider} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ReferenceDataProvider> bloombergReferenceDataProvider() {
      return _bloombergReferenceDataProvider;
    }

    /**
     * The meta-property for the {@code dependencyGraphTraceProvider} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<DependencyGraphTraceProvider> dependencyGraphTraceProvider() {
      return _dependencyGraphTraceProvider;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
