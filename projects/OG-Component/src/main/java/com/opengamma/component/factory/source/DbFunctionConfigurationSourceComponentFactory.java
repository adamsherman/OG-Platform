/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.component.factory.source;

import java.util.List;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.Lists;
import com.opengamma.engine.function.config.CombiningFunctionConfigurationSource;
import com.opengamma.engine.function.config.FunctionConfigurationDefinitionAggregator;
import com.opengamma.engine.function.config.FunctionConfigurationSource;
import com.opengamma.master.config.impl.MasterConfigSource;

/**
 * Component factory providing the {@code FunctionConfigurationSource} read from a {@code ConfigMaster}.
 */
@BeanDefinition
public class DbFunctionConfigurationSourceComponentFactory extends FunctionConfigurationSourceComponentFactory {
  /**
   * The function configuration definition name.
   */
  @PropertyDefinition(validate = "notNull")
  private String _functionDefinitionName;
  
  //-------------------------------------------------------------------------
  @Override
  protected FunctionConfigurationSource initSource() {
    FunctionConfigurationDefinitionAggregator definitionAggregator = new FunctionConfigurationDefinitionAggregator(new MasterConfigSource(getConfigMaster()));
    List<FunctionConfigurationSource> underlying = Lists.newArrayList(definitionAggregator.aggregate(_functionDefinitionName));
    underlying.addAll(curveAndSurfaceSources());
    
    final FunctionConfigurationSource[] array = underlying.toArray(new FunctionConfigurationSource[underlying.size()]);
    return CombiningFunctionConfigurationSource.of(array);
  }
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DbFunctionConfigurationSourceComponentFactory}.
   * @return the meta-bean, not null
   */
  public static DbFunctionConfigurationSourceComponentFactory.Meta meta() {
    return DbFunctionConfigurationSourceComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DbFunctionConfigurationSourceComponentFactory.Meta.INSTANCE);
  }

  @Override
  public DbFunctionConfigurationSourceComponentFactory.Meta metaBean() {
    return DbFunctionConfigurationSourceComponentFactory.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1999640458:  // functionDefinitionName
        return getFunctionDefinitionName();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1999640458:  // functionDefinitionName
        setFunctionDefinitionName((String) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_functionDefinitionName, "functionDefinitionName");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DbFunctionConfigurationSourceComponentFactory other = (DbFunctionConfigurationSourceComponentFactory) obj;
      return JodaBeanUtils.equal(getFunctionDefinitionName(), other.getFunctionDefinitionName()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getFunctionDefinitionName());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the function configuration definition name.
   * @return the value of the property, not null
   */
  public String getFunctionDefinitionName() {
    return _functionDefinitionName;
  }

  /**
   * Sets the function configuration definition name.
   * @param functionDefinitionName  the new value of the property, not null
   */
  public void setFunctionDefinitionName(String functionDefinitionName) {
    JodaBeanUtils.notNull(functionDefinitionName, "functionDefinitionName");
    this._functionDefinitionName = functionDefinitionName;
  }

  /**
   * Gets the the {@code functionDefinitionName} property.
   * @return the property, not null
   */
  public final Property<String> functionDefinitionName() {
    return metaBean().functionDefinitionName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DbFunctionConfigurationSourceComponentFactory}.
   */
  public static class Meta extends FunctionConfigurationSourceComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code functionDefinitionName} property.
     */
    private final MetaProperty<String> _functionDefinitionName = DirectMetaProperty.ofReadWrite(
        this, "functionDefinitionName", DbFunctionConfigurationSourceComponentFactory.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "functionDefinitionName");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1999640458:  // functionDefinitionName
          return _functionDefinitionName;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends DbFunctionConfigurationSourceComponentFactory> builder() {
      return new DirectBeanBuilder<DbFunctionConfigurationSourceComponentFactory>(new DbFunctionConfigurationSourceComponentFactory());
    }

    @Override
    public Class<? extends DbFunctionConfigurationSourceComponentFactory> beanType() {
      return DbFunctionConfigurationSourceComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code functionDefinitionName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> functionDefinitionName() {
      return _functionDefinitionName;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
