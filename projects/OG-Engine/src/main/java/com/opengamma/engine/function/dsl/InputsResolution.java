/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.engine.function.dsl;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectMetaProperty;

@BeanDefinition
public class InputsResolution extends DirectBean {
  
  @PropertyDefinition(validate = "notNull")
  private Collection<ResolvedInput> _inputs = new ArrayList<ResolvedInput>();
  
  public void addInput(ResolvedInput input) {
    _inputs.add(input);
  }
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code InputsResolution}.
   * @return the meta-bean, not null
   */
  public static InputsResolution.Meta meta() {
    return InputsResolution.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(InputsResolution.Meta.INSTANCE);
  }

  @Override
  public InputsResolution.Meta metaBean() {
    return InputsResolution.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1183866391:  // inputs
        return getInputs();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1183866391:  // inputs
        setInputs((Collection<ResolvedInput>) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_inputs, "inputs");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      InputsResolution other = (InputsResolution) obj;
      return JodaBeanUtils.equal(getInputs(), other.getInputs());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getInputs());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the inputs.
   * @return the value of the property, not null
   */
  public Collection<ResolvedInput> getInputs() {
    return _inputs;
  }

  /**
   * Sets the inputs.
   * @param inputs  the new value of the property, not null
   */
  public void setInputs(Collection<ResolvedInput> inputs) {
    JodaBeanUtils.notNull(inputs, "inputs");
    this._inputs = inputs;
  }

  /**
   * Gets the the {@code inputs} property.
   * @return the property, not null
   */
  public final Property<Collection<ResolvedInput>> inputs() {
    return metaBean().inputs().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code InputsResolution}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code inputs} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Collection<ResolvedInput>> _inputs = DirectMetaProperty.ofReadWrite(
        this, "inputs", InputsResolution.class, (Class) Collection.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "inputs");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1183866391:  // inputs
          return _inputs;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends InputsResolution> builder() {
      return new DirectBeanBuilder<InputsResolution>(new InputsResolution());
    }

    @Override
    public Class<? extends InputsResolution> beanType() {
      return InputsResolution.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code inputs} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Collection<ResolvedInput>> inputs() {
      return _inputs;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
