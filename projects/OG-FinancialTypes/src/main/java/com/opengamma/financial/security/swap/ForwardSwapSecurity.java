/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.security.swap;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.ZonedDateTime;

import com.opengamma.financial.security.FinancialSecurityVisitor;

/**
 * A security for a forward swap.
 */
@BeanDefinition
public class ForwardSwapSecurity extends SwapSecurity {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The security type.
   */
  public static final String SECURITY_TYPE = "SWAP";

  /**
   * The forward start date.
   */
  @PropertyDefinition(validate = "notNull")
  private ZonedDateTime _forwardStartDate;

  ForwardSwapSecurity() { //For builder
    super();
  }

  public ForwardSwapSecurity(ZonedDateTime tradeDate, ZonedDateTime effectiveDate, ZonedDateTime maturityDate, String counterparty,
      SwapLeg payLeg, SwapLeg receiveLeg, ZonedDateTime forwardStartDate) {
    super(tradeDate, effectiveDate, maturityDate, counterparty, payLeg, receiveLeg);
    setForwardStartDate(forwardStartDate);
  }
 
  @Override
  public <T> T accept(FinancialSecurityVisitor<T> visitor) {
    return visitor.visitForwardSwapSecurity(this);
  }  

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ForwardSwapSecurity}.
   * @return the meta-bean, not null
   */
  public static ForwardSwapSecurity.Meta meta() {
    return ForwardSwapSecurity.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ForwardSwapSecurity.Meta.INSTANCE);
  }

  @Override
  public ForwardSwapSecurity.Meta metaBean() {
    return ForwardSwapSecurity.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -414907925:  // forwardStartDate
        return getForwardStartDate();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -414907925:  // forwardStartDate
        setForwardStartDate((ZonedDateTime) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_forwardStartDate, "forwardStartDate");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ForwardSwapSecurity other = (ForwardSwapSecurity) obj;
      return JodaBeanUtils.equal(getForwardStartDate(), other.getForwardStartDate()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getForwardStartDate());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the forward start date.
   * @return the value of the property, not null
   */
  public ZonedDateTime getForwardStartDate() {
    return _forwardStartDate;
  }

  /**
   * Sets the forward start date.
   * @param forwardStartDate  the new value of the property, not null
   */
  public void setForwardStartDate(ZonedDateTime forwardStartDate) {
    JodaBeanUtils.notNull(forwardStartDate, "forwardStartDate");
    this._forwardStartDate = forwardStartDate;
  }

  /**
   * Gets the the {@code forwardStartDate} property.
   * @return the property, not null
   */
  public final Property<ZonedDateTime> forwardStartDate() {
    return metaBean().forwardStartDate().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ForwardSwapSecurity}.
   */
  public static class Meta extends SwapSecurity.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code forwardStartDate} property.
     */
    private final MetaProperty<ZonedDateTime> _forwardStartDate = DirectMetaProperty.ofReadWrite(
        this, "forwardStartDate", ForwardSwapSecurity.class, ZonedDateTime.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "forwardStartDate");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -414907925:  // forwardStartDate
          return _forwardStartDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ForwardSwapSecurity> builder() {
      return new DirectBeanBuilder<ForwardSwapSecurity>(new ForwardSwapSecurity());
    }

    @Override
    public Class<? extends ForwardSwapSecurity> beanType() {
      return ForwardSwapSecurity.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code forwardStartDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ZonedDateTime> forwardStartDate() {
      return _forwardStartDate;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
