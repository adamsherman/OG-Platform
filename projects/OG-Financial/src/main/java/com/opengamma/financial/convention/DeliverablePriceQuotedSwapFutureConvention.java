/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.convention;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;

import com.opengamma.id.ExternalId;
import com.opengamma.id.ExternalIdBundle;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Convention for price-quoted deliverable swap futures (as traded on CME).
 */
@BeanDefinition
public class DeliverablePriceQuotedSwapFutureConvention extends ExchangeTradedFutureAndOptionConvention {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The convention for the underlying swap.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _swapConvention;

  /**
   * The notional for the future.
   */
  @PropertyDefinition
  private double _notional;

  /**
   * For the builder.
   */
  /* package */ DeliverablePriceQuotedSwapFutureConvention() {
    super();
  }

  /**
   * @param name The name of the convention, not null
   * @param externalIdBundle The external identifiers for this convention, not null
   * @param expiryConvention The expiry convention, not null
   * @param exchangeCalendar The exchange calendar, not null
   * @param swapConvention The underlying swap convention, not null
   * @param notional The notional of the future
   */
  public DeliverablePriceQuotedSwapFutureConvention(final String name, final ExternalIdBundle externalIdBundle, final ExternalId expiryConvention,
      final ExternalId exchangeCalendar, final ExternalId swapConvention, final double notional) {
    super(name, externalIdBundle, expiryConvention, exchangeCalendar);
    setSwapConvention(swapConvention);
    setNotional(notional);
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DeliverablePriceQuotedSwapFutureConvention}.
   * @return the meta-bean, not null
   */
  public static DeliverablePriceQuotedSwapFutureConvention.Meta meta() {
    return DeliverablePriceQuotedSwapFutureConvention.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DeliverablePriceQuotedSwapFutureConvention.Meta.INSTANCE);
  }

  @Override
  public DeliverablePriceQuotedSwapFutureConvention.Meta metaBean() {
    return DeliverablePriceQuotedSwapFutureConvention.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 1414180196:  // swapConvention
        return getSwapConvention();
      case 1585636160:  // notional
        return getNotional();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 1414180196:  // swapConvention
        setSwapConvention((ExternalId) newValue);
        return;
      case 1585636160:  // notional
        setNotional((Double) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_swapConvention, "swapConvention");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DeliverablePriceQuotedSwapFutureConvention other = (DeliverablePriceQuotedSwapFutureConvention) obj;
      return JodaBeanUtils.equal(getSwapConvention(), other.getSwapConvention()) &&
          JodaBeanUtils.equal(getNotional(), other.getNotional()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getSwapConvention());
    hash += hash * 31 + JodaBeanUtils.hashCode(getNotional());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the convention for the underlying swap.
   * @return the value of the property, not null
   */
  public ExternalId getSwapConvention() {
    return _swapConvention;
  }

  /**
   * Sets the convention for the underlying swap.
   * @param swapConvention  the new value of the property, not null
   */
  public void setSwapConvention(ExternalId swapConvention) {
    JodaBeanUtils.notNull(swapConvention, "swapConvention");
    this._swapConvention = swapConvention;
  }

  /**
   * Gets the the {@code swapConvention} property.
   * @return the property, not null
   */
  public final Property<ExternalId> swapConvention() {
    return metaBean().swapConvention().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the notional for the future.
   * @return the value of the property
   */
  public double getNotional() {
    return _notional;
  }

  /**
   * Sets the notional for the future.
   * @param notional  the new value of the property
   */
  public void setNotional(double notional) {
    this._notional = notional;
  }

  /**
   * Gets the the {@code notional} property.
   * @return the property, not null
   */
  public final Property<Double> notional() {
    return metaBean().notional().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DeliverablePriceQuotedSwapFutureConvention}.
   */
  public static class Meta extends ExchangeTradedFutureAndOptionConvention.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code swapConvention} property.
     */
    private final MetaProperty<ExternalId> _swapConvention = DirectMetaProperty.ofReadWrite(
        this, "swapConvention", DeliverablePriceQuotedSwapFutureConvention.class, ExternalId.class);
    /**
     * The meta-property for the {@code notional} property.
     */
    private final MetaProperty<Double> _notional = DirectMetaProperty.ofReadWrite(
        this, "notional", DeliverablePriceQuotedSwapFutureConvention.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "swapConvention",
        "notional");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1414180196:  // swapConvention
          return _swapConvention;
        case 1585636160:  // notional
          return _notional;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends DeliverablePriceQuotedSwapFutureConvention> builder() {
      return new DirectBeanBuilder<DeliverablePriceQuotedSwapFutureConvention>(new DeliverablePriceQuotedSwapFutureConvention());
    }

    @Override
    public Class<? extends DeliverablePriceQuotedSwapFutureConvention> beanType() {
      return DeliverablePriceQuotedSwapFutureConvention.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code swapConvention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> swapConvention() {
      return _swapConvention;
    }

    /**
     * The meta-property for the {@code notional} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> notional() {
      return _notional;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

