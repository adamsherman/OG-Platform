/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.batch.domain;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.engine.ComputationTargetSpecification;
import com.opengamma.engine.target.ComputationTargetType;
import com.opengamma.id.UniqueId;

/**
 * Data model for the computation target specification.
 */
@BeanDefinition
public class HbComputationTargetSpecification extends DirectBean {

  @PropertyDefinition
  private long _id = -1;

  /**
   * The type of the target.
   */
  @PropertyDefinition
  private ComputationTargetType _type;

  /**
   * The identifier of the target (schema).
   */
  @PropertyDefinition
  private String _uidScheme;

  /**
   * The identifier of the target (value).
   */
  @PropertyDefinition
  private String _uidValue;

  /**
   * The identifier of the target (version).
   */
  @PropertyDefinition
  private String _uidVersion;

  /**
   * Gets the unique id of the base market data.
   * @return the value of the base market data.
   */
  public UniqueId getUniqueId() {
    return UniqueId.of(getUidScheme(), getUidValue(), getUidVersion());
  }

  /**
   * Sets the unique id of the base market data
   * @param baseUid  the new base market data.
   */
  public void setUniqueId(UniqueId baseUid) {
    setUidScheme(baseUid.getScheme());
    setUidValue(baseUid.getValue());
    setUidVersion(baseUid.getVersion());
  }

  public HbComputationTargetSpecification() {
  }

  public HbComputationTargetSpecification(ComputationTargetSpecification computationTargetSpecification) {
    setType(computationTargetSpecification.getType());
    setUniqueId(computationTargetSpecification.getUniqueId());
  }

  public ComputationTargetSpecification toComputationTargetSpec() {
    return new ComputationTargetSpecification(_type, getUniqueId());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code HbComputationTargetSpecification}.
   * @return the meta-bean, not null
   */
  public static HbComputationTargetSpecification.Meta meta() {
    return HbComputationTargetSpecification.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(HbComputationTargetSpecification.Meta.INSTANCE);
  }

  @Override
  public HbComputationTargetSpecification.Meta metaBean() {
    return HbComputationTargetSpecification.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 3355:  // id
        return getId();
      case 3575610:  // type
        return getType();
      case -1680381419:  // uidScheme
        return getUidScheme();
      case -605679871:  // uidValue
        return getUidValue();
      case -2117765528:  // uidVersion
        return getUidVersion();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 3355:  // id
        setId((Long) newValue);
        return;
      case 3575610:  // type
        setType((ComputationTargetType) newValue);
        return;
      case -1680381419:  // uidScheme
        setUidScheme((String) newValue);
        return;
      case -605679871:  // uidValue
        setUidValue((String) newValue);
        return;
      case -2117765528:  // uidVersion
        setUidVersion((String) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      HbComputationTargetSpecification other = (HbComputationTargetSpecification) obj;
      return JodaBeanUtils.equal(getId(), other.getId()) &&
          JodaBeanUtils.equal(getType(), other.getType()) &&
          JodaBeanUtils.equal(getUidScheme(), other.getUidScheme()) &&
          JodaBeanUtils.equal(getUidValue(), other.getUidValue()) &&
          JodaBeanUtils.equal(getUidVersion(), other.getUidVersion());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getType());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUidScheme());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUidValue());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUidVersion());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the id.
   * @return the value of the property
   */
  public long getId() {
    return _id;
  }

  /**
   * Sets the id.
   * @param id  the new value of the property
   */
  public void setId(long id) {
    this._id = id;
  }

  /**
   * Gets the the {@code id} property.
   * @return the property, not null
   */
  public final Property<Long> id() {
    return metaBean().id().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the type of the target.
   * @return the value of the property
   */
  public ComputationTargetType getType() {
    return _type;
  }

  /**
   * Sets the type of the target.
   * @param type  the new value of the property
   */
  public void setType(ComputationTargetType type) {
    this._type = type;
  }

  /**
   * Gets the the {@code type} property.
   * @return the property, not null
   */
  public final Property<ComputationTargetType> type() {
    return metaBean().type().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the identifier of the target (schema).
   * @return the value of the property
   */
  public String getUidScheme() {
    return _uidScheme;
  }

  /**
   * Sets the identifier of the target (schema).
   * @param uidScheme  the new value of the property
   */
  public void setUidScheme(String uidScheme) {
    this._uidScheme = uidScheme;
  }

  /**
   * Gets the the {@code uidScheme} property.
   * @return the property, not null
   */
  public final Property<String> uidScheme() {
    return metaBean().uidScheme().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the identifier of the target (value).
   * @return the value of the property
   */
  public String getUidValue() {
    return _uidValue;
  }

  /**
   * Sets the identifier of the target (value).
   * @param uidValue  the new value of the property
   */
  public void setUidValue(String uidValue) {
    this._uidValue = uidValue;
  }

  /**
   * Gets the the {@code uidValue} property.
   * @return the property, not null
   */
  public final Property<String> uidValue() {
    return metaBean().uidValue().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the identifier of the target (version).
   * @return the value of the property
   */
  public String getUidVersion() {
    return _uidVersion;
  }

  /**
   * Sets the identifier of the target (version).
   * @param uidVersion  the new value of the property
   */
  public void setUidVersion(String uidVersion) {
    this._uidVersion = uidVersion;
  }

  /**
   * Gets the the {@code uidVersion} property.
   * @return the property, not null
   */
  public final Property<String> uidVersion() {
    return metaBean().uidVersion().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code HbComputationTargetSpecification}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code id} property.
     */
    private final MetaProperty<Long> _id = DirectMetaProperty.ofReadWrite(
        this, "id", HbComputationTargetSpecification.class, Long.TYPE);
    /**
     * The meta-property for the {@code type} property.
     */
    private final MetaProperty<ComputationTargetType> _type = DirectMetaProperty.ofReadWrite(
        this, "type", HbComputationTargetSpecification.class, ComputationTargetType.class);
    /**
     * The meta-property for the {@code uidScheme} property.
     */
    private final MetaProperty<String> _uidScheme = DirectMetaProperty.ofReadWrite(
        this, "uidScheme", HbComputationTargetSpecification.class, String.class);
    /**
     * The meta-property for the {@code uidValue} property.
     */
    private final MetaProperty<String> _uidValue = DirectMetaProperty.ofReadWrite(
        this, "uidValue", HbComputationTargetSpecification.class, String.class);
    /**
     * The meta-property for the {@code uidVersion} property.
     */
    private final MetaProperty<String> _uidVersion = DirectMetaProperty.ofReadWrite(
        this, "uidVersion", HbComputationTargetSpecification.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "id",
        "type",
        "uidScheme",
        "uidValue",
        "uidVersion");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return _id;
        case 3575610:  // type
          return _type;
        case -1680381419:  // uidScheme
          return _uidScheme;
        case -605679871:  // uidValue
          return _uidValue;
        case -2117765528:  // uidVersion
          return _uidVersion;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends HbComputationTargetSpecification> builder() {
      return new DirectBeanBuilder<HbComputationTargetSpecification>(new HbComputationTargetSpecification());
    }

    @Override
    public Class<? extends HbComputationTargetSpecification> beanType() {
      return HbComputationTargetSpecification.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code id} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Long> id() {
      return _id;
    }

    /**
     * The meta-property for the {@code type} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ComputationTargetType> type() {
      return _type;
    }

    /**
     * The meta-property for the {@code uidScheme} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> uidScheme() {
      return _uidScheme;
    }

    /**
     * The meta-property for the {@code uidValue} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> uidValue() {
      return _uidValue;
    }

    /**
     * The meta-property for the {@code uidVersion} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> uidVersion() {
      return _uidVersion;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
